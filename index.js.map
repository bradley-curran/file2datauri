{
  "version": 3,
  "sources": ["src/index.ts"],
  "sourcesContent": ["#!/usr/bin/env node\nimport { fromBuffer } from \"file-type\";\nimport minimist = require(\"minimist\");\nimport { createReadStream } from \"fs\";\nimport { Stream } from \"stream\";\n\nconst argv = minimist(process.argv.slice(2));\n\nconst streamToBuffer = (stream: Stream): Promise<Buffer> => {\n  return new Promise((resolve, reject) => {\n    const _buf: Buffer[] = [];\n\n    stream.on(\"data\", (chunk) => _buf.push(chunk));\n    stream.on(\"end\", () => resolve(Buffer.concat(_buf)));\n    stream.on(\"error\", (err) => reject(err));\n  });\n};\n\nconst mimeTypeFromBuffer = async (buf: Buffer) => {\n  const ss: any = await fromBuffer(buf);\n  return ss ? ss.mime : ss;\n};\n\nconst file2datauri = async (filename?: string, mimeType?: string) => {\n  const stream = filename ? createReadStream(filename) : process.stdin;\n  const buf = await streamToBuffer(stream);\n  const mime = mimeType ? mimeType : await mimeTypeFromBuffer(buf);\n  const data = buf.toString(\"base64\");\n\n  if (mime) {\n    return `data:${mime};base64,${data}`;\n  } else {\n    return `data:;base64,${data}`;\n  }\n};\n\nfile2datauri(argv.f, argv.m)\n  .then((a) => console.log(a))\n  .catch((e) => console.log(e));\n"],
  "mappings": ";aACA,MAA2B,6CAE3B,EAAiC,cAD1B,EAAW,QAAQ,oCAIpB,EAAO,EAAS,QAAQ,KAAK,MAAM,CAAC,CAAC,EAErC,EAAiB,AAAC,GACf,GAAI,SAAQ,CAAC,EAAS,IAAW,CACtC,GAAM,GAAiB,CAAC,EAExB,EAAO,GAAG,OAAQ,AAAC,GAAU,EAAK,KAAK,CAAK,CAAC,EAC7C,EAAO,GAAG,MAAO,IAAM,EAAQ,OAAO,OAAO,CAAI,CAAC,CAAC,EACnD,EAAO,GAAG,QAAS,AAAC,GAAQ,EAAO,CAAG,CAAC,CACzC,CAAC,EAGG,EAAqB,KAAO,IAAgB,CAChD,GAAM,GAAU,KAAM,iBAAW,CAAG,EACpC,MAAO,IAAK,EAAG,IACjB,EAEM,EAAe,MAAO,EAAmB,IAAsB,CACnE,GAAM,GAAS,EAAW,uBAAiB,CAAQ,EAAI,QAAQ,MACzD,EAAM,KAAM,GAAe,CAAM,EACjC,EAAO,GAAsB,KAAM,GAAmB,CAAG,EACzD,EAAO,EAAI,SAAS,QAAQ,EAElC,MAAI,GACK,QAAQ,YAAe,IAEvB,gBAAgB,GAE3B,EAEA,EAAa,EAAK,EAAG,EAAK,CAAC,EACxB,KAAK,AAAC,GAAM,QAAQ,IAAI,CAAC,CAAC,EAC1B,MAAM,AAAC,GAAM,QAAQ,IAAI,CAAC,CAAC",
  "names": []
}
